{"version":3,"sources":["components/DefaultLayout/index.tsx","Pages/HomePage/index.tsx","common/api.tsx","Pages/LoginPage/index.tsx","components/ActivityPage/upload.tsx","components/DogPage/description.tsx","components/DogPage/image-gallery.tsx","components/DogPage/info-table.tsx","Pages/DogPage/index.tsx","components/ExcoPage/info-table.tsx","Pages/ExcoPage/index.tsx","components/MainPage/description-form.tsx","Pages/MainPage/index.tsx","components/ActivityPage/description-form-update.tsx","components/ActivityPage/description-form-post.tsx","Pages/ActivityPage/index.tsx","App.tsx","index.tsx"],"names":["Sider","Layout","Content","DefaultLayout","props","children","history","useHistory","isWeb","Grid","useBreakpoint","lg","currentPage","window","location","href","split","style","minHeight","theme","defaultSelectedKeys","selectedKeys","mode","Item","icon","BankOutlined","to","InfoCircleOutlined","UserOutlined","StarOutlined","ReadOutlined","onClick","localStorage","removeItem","message","success","push","ArrowLeftOutlined","margin","className","padding","Title","Typography","HomePage","span","BlockOutlined","fontSize","color","MAIN_URL","makeRequest","request","method","a","url","endpoint","params","Object","keys","forEach","param","ind","paramsObj","headers","fetch","body","data","JSON","stringify","then","res","ok","json","Error","console","log","get","patch","post","getUser","req","username","password","response","getDogs","updateDogInfo","dog","dog_id","dog_gender","dog_name","dog_age","dog_characteristics","postDogImage","image_url","gallery_position","getExcos","updateExcoInfo","exco","exco_id","exco_name","exco_year_of_study","exco_hobbies","exco_favourite_dog","getMainDescription","pawfriends_description","updateMainDescription","description","getActivityPosts","updateActivityPost","post_id","date_posted","activity_description","submitActivityPost","form","date","useState","React","useEffect","LoginPage","setUserAuthenticated","setUsername","setPassword","getItem","submitLoginForm","setItem","error","justify","hoverable","height","marginTop","textAlign","marginBottom","name","initialValues","remember","label","rules","required","onChange","text","target","value","Password","type","htmlType","FileUpload","setImageUpdated","setImageUrl","disableUpload","errorMessage","file","setFile","uploading","setUploading","submitFile","formData","FormData","append","axios","Location","border","event","files","block","disabled","Paragraph","labelValueMapping","s","borderBlock","marginLeft","content","Description","setRefetchApi","editableDogInfo","setEditableDogInfo","showUpdateButton","setShowUpdateButton","onUpdate","labelStyle","contentStyle","bordered","map","row","field","editable","tooltip","newDogObj","marginRight","GalleryArr","ImageGallery","dogImages","num","imageToDisplay","filter","image","width","src","InfoTable","Select","Option","imageUrl","imageUpdated","imageUploadPosition","setImageUploadPosition","setDisableUpload","onImageUpdate","coverImageUrl","length","position","options","placeholder","DogPage","dogs","setDogs","images","setImages","refetchApi","loadDogs","borderRadius","borderWidth","borderStyle","borderColor","editableExcoInfo","setEditableExcoInfo","newExcoObj","ExcoPage","excos","setExcos","loadExcos","DescriptionForm","setShowForm","editedDescription","setEditedDescription","submitEditedDescription","MainPage","setDescription","showForm","loadDescription","ReactHTMLParser","DescriptionFormUpdate","setReload","editedPost","setEditedPost","Date","moment","toDate","utcOffset","format","DescriptionFormPost","formDetails","setFormDetails","submitForm","backgroundColor","ActivityPage","posts","setPosts","reload","loadPosts","String","substring","App","userAuthenticated","isLoggedIn","useLocation","exact","path","component","pathname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fba5100d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Layout, Menu, message, Grid } from \"antd\";\nimport {\n  InfoCircleOutlined,\n  BankOutlined,\n  StarOutlined,\n  UserOutlined,\n  ReadOutlined,\n  ArrowLeftOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst { Sider, Content } = Layout;\n\ninterface IProps {\n  children?: any;\n}\nconst DefaultLayout: React.FC<IProps> = (props) => {\n  const { children } = props;\n  const history = useHistory();\n  const bp = Grid.useBreakpoint();\n  const isWeb = bp.lg;\n\n  // some lazy ass way to get current page\n  const currentPage = window.location.href.split(\"/\")[3]\n    ? window.location.href.split(\"/\")[3]\n    : \"home\";\n\n  const logUserOut = () => {\n    localStorage.removeItem(\"userLoggedIn\");\n    message.success(\"Successfully logged out!\");\n    history.push(\"/login\");\n  };\n\n  if (!isWeb) return children ? children : <div />;\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider>\n        <Menu\n          theme=\"dark\"\n          defaultSelectedKeys={[\"1\"]}\n          selectedKeys={[currentPage]}\n          mode=\"inline\"\n        >\n          <Menu.Item key=\"home\" icon={<BankOutlined />}>\n            Dashboard\n            <Link to=\"/home\" />\n          </Menu.Item>\n          <Menu.Item key=\"dogs\" icon={<InfoCircleOutlined />}>\n            Dog Page\n            <Link to=\"/dogs\" />\n          </Menu.Item>\n\n          <Menu.Item key=\"exco\" icon={<UserOutlined />}>\n            Exco Page\n            <Link to=\"/exco\" />\n          </Menu.Item>\n          <Menu.Item key=\"main\" icon={<StarOutlined />}>\n            Main Page\n            <Link to=\"/main\" />\n          </Menu.Item>\n          <Menu.Item key=\"activity\" icon={<ReadOutlined />}>\n            'What we do' Page\n            <Link to=\"/activity\" />\n          </Menu.Item>\n\n          <Menu.Item\n            onClick={() => logUserOut()}\n            key=\"logout\"\n            icon={<ArrowLeftOutlined />}\n          >\n            Logout\n          </Menu.Item>\n        </Menu>\n      </Sider>\n\n      <Content style={{ margin: \"24px 16px 0\" }}>\n        <div\n          className=\"site-layout-background\"\n          style={{ padding: 24, minHeight: 360 }}\n        >\n          {children}\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default DefaultLayout;\n","import { BlockOutlined } from \"@ant-design/icons\";\nimport { Col, Row, Typography } from \"antd\";\nimport * as React from \"react\";\nimport DefaultLayout from \"../../components/DefaultLayout\";\n\nconst { Title } = Typography;\n\nconst HomePage: React.FC = () => {\n  return (\n    <DefaultLayout>\n      <Row>\n        <Col span={8}>\n          <BlockOutlined style={{ fontSize: \"400px\", color: \"lightblue\" }} />\n        </Col>\n        <Col span={14}>\n          <Title>Welcome to the Pawfriends Dashboard </Title>\n          <p>Click on any of the tabs on the left to edit the page</p>\n          <p>\n            If you need any help or wanna provide suggestions to the\n            website,drop an email to{\" \"}\n            <a href=\"mailto:chukimguan@gmail.com\"> chukimguan@gmail.com</a> or\n            tele me at @brockchu.\n          </p>\n        </Col>\n      </Row>\n    </DefaultLayout>\n  );\n};\n\nexport default HomePage;\n","export const MAIN_URL = `https://pawfriends-api.herokuapp.com`;\n\ninterface IRequest {\n  endpoint: string;\n  headers?: Record<string, unknown>;\n  params?: Record<string, unknown>;\n  data?: Record<string, unknown>;\n}\n\nasync function makeRequest(request: IRequest, method: string) {\n  let url = `${MAIN_URL}/${request.endpoint}`;\n\n  if (request.params) {\n    Object.keys(request.params).forEach((param, ind) => {\n      const paramsObj = request.params ? request.params : {};\n      url += `${ind === 0 ? \"?\" : \"&\"}${param}=${paramsObj[param]}`;\n    });\n  }\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    ...request.headers,\n  } as unknown as Headers;\n\n  try {\n    return fetch(url, {\n      method: method,\n      headers: headers,\n      body: request.data ? JSON.stringify(request.data) : null,\n    }).then((res) => {\n      if (res.ok) return res.json();\n      else throw Error;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nasync function get<T>(request: IRequest): Promise<T> {\n  return await makeRequest(request, \"GET\");\n}\n\nasync function patch<T>(request: IRequest): Promise<T> {\n  return await makeRequest(request, \"PATCH\");\n}\n\nasync function post<T>(request: IRequest): Promise<T> {\n  return await makeRequest(request, \"POST\");\n}\n\nasync function remove<T>(request: IRequest): Promise<T> {\n  return await makeRequest(request, \"DELETE\");\n}\n\n// Login\n\nexport async function getUser(req: ILoginDetails): Promise<boolean> {\n  const request: IRequest = {\n    endpoint: `login`,\n    params: {\n      username: req.username,\n      password: req.password,\n    },\n  };\n\n  const response = await get<any>(request);\n  if (!response.success) return false;\n  return response.success;\n}\n\n// Dogs\n\nexport async function getDogs(): Promise<any> {\n  const request: IRequest = {\n    endpoint: `dogs`,\n  };\n\n  const response = await get<any>(request);\n  console.log(response);\n  return response;\n}\n\nexport async function updateDogInfo(dog: IDogData): Promise<boolean> {\n  const { dog_id, dog_gender, dog_name, dog_age, dog_characteristics } = dog;\n  const request: IRequest = {\n    endpoint: `update/dog`,\n    params: { dog_id, dog_gender, dog_name, dog_age, dog_characteristics },\n  };\n\n  const response = await patch<any>(request);\n  return response.success;\n}\n\nexport async function postDogImage(\n  dog_id: number,\n  image_url: string,\n  gallery_position: number\n): Promise<boolean> {\n  const request: IRequest = {\n    endpoint: `post/dog_image`,\n    data: { dog_id, image_url, gallery_position },\n  };\n\n  const response = await post<any>(request);\n  return response.success;\n}\n\n// Exco\n\nexport async function getExcos(): Promise<IExcoData[]> {\n  const request: IRequest = {\n    endpoint: `excos`,\n  };\n\n  const response = await get<any>(request);\n  return response;\n}\n\nexport async function updateExcoInfo(exco: IExcoData): Promise<boolean> {\n  const {\n    exco_id,\n    exco_name,\n    exco_year_of_study,\n    exco_hobbies,\n    exco_favourite_dog,\n  } = exco;\n  const request: IRequest = {\n    endpoint: `update/exco`,\n    params: {\n      exco_id,\n      exco_name,\n      exco_year_of_study,\n      exco_hobbies,\n      exco_favourite_dog,\n    },\n  };\n\n  const response = await patch<any>(request);\n  return response.success;\n}\n\n// Main Page\n\nexport async function getMainDescription(): Promise<string> {\n  const request: IRequest = {\n    endpoint: `mainpage`,\n  };\n\n  const response = await get<any>(request);\n  return response.pawfriends_description;\n}\n\nexport async function updateMainDescription(\n  description: string\n): Promise<boolean> {\n  const request: IRequest = {\n    endpoint: `update/mainpage`,\n    params: {\n      description,\n    },\n  };\n\n  const response = await patch<any>(request);\n  return response.success;\n}\n\n// Activity Page\nexport async function getActivityPosts(): Promise<IActivityPosts[]> {\n  const request: IRequest = {\n    endpoint: `activities`,\n  };\n\n  const response = await get<IActivityPosts[]>(request);\n  return response;\n}\n\nexport async function updateActivityPost(\n  post: IActivityPosts\n): Promise<boolean> {\n  const { post_id, date_posted, activity_description } = post;\n\n  const request: IRequest = {\n    endpoint: `update/activity`,\n    params: { post_id, date_posted, activity_description },\n  };\n\n  const response = await patch<any>(request);\n  return response.success;\n}\n\nexport async function submitActivityPost(\n  form: IActivityPostForm\n): Promise<boolean> {\n  const { date, description } = form;\n\n  const request: IRequest = {\n    endpoint: `post/activity`,\n    data: { date, description },\n  };\n\n  const response = await post<boolean>(request);\n  return response;\n}\n","import * as React from \"react\";\nimport { Form, Input, Button, Card, Row, Col, Typography, message } from \"antd\";\nimport { getUser } from \"../../common/api\";\nimport { useHistory } from \"react-router-dom\";\n\nconst { Title } = Typography;\nconst { useState, useEffect } = React;\n\ninterface IProps {\n  setUserAuthenticated: (authenticated: boolean) => void;\n}\n\nconst LoginPage: React.FC<IProps> = (props) => {\n  const { setUserAuthenticated } = props;\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const history = useHistory();\n\n  useEffect(() => {\n    if (localStorage.getItem(\"userLoggedIn\") !== \"true\") history.push(\"/login\");\n  }, []);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"userLoggedIn\") == \"true\") history.push(\"/home\");\n  }, []);\n\n  const submitLoginForm = async () => {\n    try {\n      const response = await getUser({\n        username: username,\n        password: password,\n      });\n      if (response) {\n        localStorage.setItem(\"userLoggedIn\", \"true\");\n        message.success(\"Successfully logged in!\");\n        setUserAuthenticated(true);\n        history.push(\"/home\");\n      } else {\n        message.error(\"Wrong login details.\");\n      }\n    } catch {\n      message.error(\"Error connecting to server.\");\n    }\n  };\n\n  return (\n    <Row justify=\"center\">\n      <Col span={14}>\n        <Card hoverable style={{ height: \"400px\", marginTop: \"100px\" }}>\n          <Title style={{ textAlign: \"center\", marginBottom: \"50px\" }}>\n            Login\n          </Title>\n          <Form name=\"basic\" initialValues={{ remember: true }}>\n            <Form.Item\n              label=\"Username\"\n              name=\"username\"\n              rules={[\n                { required: true, message: \"Please input your username!\" },\n              ]}\n            >\n              <Input onChange={(text) => setUsername(text.target.value)} />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Password\"\n              name=\"password\"\n              rules={[\n                { required: true, message: \"Please input your password!\" },\n              ]}\n            >\n              <Input.Password\n                onChange={(text) => setPassword(text.target.value)}\n              />\n            </Form.Item>\n\n            <Form.Item>\n              <Row justify=\"center\">\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  onClick={() => {\n                    submitLoginForm();\n                  }}\n                >\n                  Submit\n                </Button>\n              </Row>\n            </Form.Item>\n          </Form>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default LoginPage;\n","import { Button, Input, message, Row, Col, Spin } from \"antd\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\n\ninterface IProps {\n  disableUpload?: boolean;\n  errorMessage?: string;\n  setImageUrl: (imageUrl: string) => void;\n  setImageUpdated: (imageUpdated: boolean) => void;\n}\nconst FileUpload: React.FC<IProps> = (props) => {\n  const { setImageUpdated, setImageUrl, disableUpload, errorMessage } = props;\n  const [file, setFile] = useState<any>(null);\n  const [uploading, setUploading] = useState<boolean>(false);\n\n  const submitFile = async () => {\n    if (disableUpload) {\n      message.error(errorMessage);\n    } else {\n      try {\n        if (!file) {\n          throw new Error(\"Select a file first!\");\n        }\n\n        const formData = new FormData();\n        formData.append(\"file\", file[0]);\n        setUploading(true);\n\n        await axios\n          .post(`https://pawfriends-api.herokuapp.com/upload`, formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          })\n          .then((res) => setImageUrl(res.data.Location));\n\n        message.success(\"Image uploaded!\");\n        setImageUpdated(true);\n      } catch (error) {\n        // handle error\n        message.error(\"Error uploading,please try again.\");\n      }\n      setUploading(false);\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        <Col span={12}>\n          <Input\n            style={{ border: \"none\" }}\n            type=\"file\"\n            onChange={(event) => setFile(event.target.files)}\n          />\n        </Col>\n        <Col span={12}>\n          {!uploading ? (\n            <Button block type=\"primary\" onClick={() => submitFile()}>\n              Upload Image\n            </Button>\n          ) : (\n            <Button block disabled>\n              Uploading...\n            </Button>\n          )}\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default FileUpload;\n","import * as React from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Empty,\n  message,\n  Row,\n  Typography,\n} from \"antd\";\nimport { postDogImage, updateDogInfo } from \"../../common/api\";\nimport FileUpload from \"../ActivityPage/upload\";\n\nconst { Paragraph } = Typography;\nconst { useState, useEffect } = React;\n\ninterface IProps {\n  dog: any;\n  setRefetchApi: (refetchApi: boolean) => void;\n}\n\nconst labelValueMapping = [\n  { value: \"dog_name\", label: \"Name\" },\n  { value: \"dog_gender\", label: \"Gender\" },\n  { value: \"dog_age\", label: \"Age\" },\n];\n\nconst Description: React.FC<IProps> = (props) => {\n  const { dog, setRefetchApi } = props;\n  const [editableDogInfo, setEditableDogInfo] = useState<IDogData>(dog);\n  const [showUpdateButton, setShowUpdateButton] = useState<boolean>(false);\n\n  const onUpdate = async () => {\n    try {\n      const response = await updateDogInfo(editableDogInfo);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n    setRefetchApi(true);\n  };\n\n  return (\n    <>\n      <Descriptions\n        style={s.description}\n        labelStyle={s.label as any}\n        contentStyle={s.content}\n        bordered\n      >\n        {labelValueMapping.map((row) => {\n          const field = row.value;\n\n          return (\n            <Descriptions.Item label={row.label} span={3}>\n              <Paragraph\n                editable={{\n                  tooltip: \"Click to edit text\",\n                  onChange: (text) => {\n                    setShowUpdateButton(true);\n                    const newDogObj = { ...editableDogInfo };\n                    newDogObj[field] = text;\n                    setEditableDogInfo(newDogObj);\n                  },\n                }}\n              >\n                {editableDogInfo[field]}\n                {!editableDogInfo[field] && (\n                  <span style={{ color: \"gray\" }}>No information</span>\n                )}\n              </Paragraph>\n            </Descriptions.Item>\n          );\n        })}\n\n        <Descriptions.Item label={\"Characteristics\"} span={3}>\n          <Paragraph\n            editable={{\n              tooltip: \"Click to edit text\",\n              onChange: (text) => {\n                setShowUpdateButton(true);\n                const newDogObj = { ...editableDogInfo };\n                newDogObj[\"dog_characteristics\"] = text;\n                setEditableDogInfo(newDogObj);\n              },\n            }}\n          >\n            {editableDogInfo.dog_characteristics}\n            {!editableDogInfo.dog_characteristics && (\n              <span style={{ color: \"gray\" }}>No information</span>\n            )}\n          </Paragraph>\n        </Descriptions.Item>\n      </Descriptions>\n\n      <Row justify=\"center\">\n        {showUpdateButton && (\n          <>\n            <Button\n              style={{ marginTop: \"10px\", marginRight: \"10px\" }}\n              onClick={() => {\n                setShowUpdateButton(false);\n                setEditableDogInfo(dog);\n              }}\n            >\n              Discard Changes\n            </Button>\n\n            <Button\n              style={{ marginTop: \"10px\" }}\n              onClick={() => {\n                onUpdate();\n                setShowUpdateButton(false);\n              }}\n              type=\"primary\"\n            >\n              Save Changes\n            </Button>\n          </>\n        )}\n      </Row>\n    </>\n  );\n};\n\nconst s = {\n  description: {\n    borderBlock: \"2px solid\",\n    marginTop: \"20px\",\n    marginLeft: \"20px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n  },\n  content: {\n    fontSize: \"16px\",\n  },\n};\n\nexport default Description;\n","import * as React from \"react\";\nimport { Row, Col, Card, Empty } from \"antd\";\n\ninterface IProps {\n  dogImages: IDogImageEndpoint[];\n}\n\nconst GalleryArr = [1, 2, 3, 4];\nconst ImageGallery: React.FC<IProps> = (props) => {\n  const { dogImages } = props;\n\n  return (\n    <>\n      <Row style={{ marginTop: 20, marginLeft: 20 }}>\n        {GalleryArr.map((num) => {\n          const imageToDisplay = dogImages.filter(\n            (image) => image.gallery_position == num\n          )[0];\n\n          return imageToDisplay ? (\n            <Col span={6}>\n              <img\n                style={{ height: 325, width: \"100%\" }}\n                src={imageToDisplay.image_url}\n              />\n              <p style={{ fontSize: 20 }}> Gallery Image {num}</p>\n            </Col>\n          ) : (\n            <Col span={6}>\n              <Card style={{ height: 325, width: \"100%\" }}>\n                <Empty />\n              </Card>\n              <p style={{ fontSize: 20 }}> Gallery Image {num}</p>\n            </Col>\n          );\n        })}\n      </Row>\n    </>\n  );\n};\n\nexport default ImageGallery;\n","import * as React from \"react\";\nimport { Card, Col, Empty, message, Row, Select, Typography } from \"antd\";\nimport { postDogImage } from \"../../common/api\";\nimport FileUpload from \"../ActivityPage/upload\";\nimport Description from \"./description\";\nimport ImageGallery from \"./image-gallery\";\n\nconst { useState, useEffect } = React;\nconst { Option } = Select;\n\ninterface IProps {\n  dog: any;\n  dogImages: IDogImageEndpoint[];\n  setRefetchApi: (refetchApi: boolean) => void;\n}\n\nconst InfoTable: React.FC<IProps> = (props) => {\n  const { dog, dogImages, setRefetchApi } = props;\n  const [imageUrl, setImageUrl] = useState<string>(\"\");\n  const [imageUpdated, setImageUpdated] = useState<boolean>(false);\n  const [imageUploadPosition, setImageUploadPosition] = useState<number>();\n  const [disableUpload, setDisableUpload] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (imageUpdated) {\n      onImageUpdate();\n      setImageUpdated(false);\n    }\n  }, [imageUpdated]);\n\n  useEffect(() => {\n    if (imageUploadPosition || imageUploadPosition === 0)\n      setDisableUpload(false);\n  }, [imageUploadPosition]);\n\n  const onImageUpdate = async () => {\n    try {\n      const response = await postDogImage(\n        dog.dog_id,\n        imageUrl,\n        imageUploadPosition ? imageUploadPosition : 0\n      );\n      setRefetchApi(true);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n  };\n\n  const imageOptions = [\n    { value: 0, label: \"Cover\" },\n    { value: 1, label: \"Gallery Image 1\" },\n    { value: 2, label: \"Gallery Image 2\" },\n    { value: 3, label: \"Gallery Image 3\" },\n    { value: 4, label: \"Gallery Image 4\" },\n  ];\n\n  const coverImageUrl = dogImages.filter(\n    (image) => image.gallery_position == 0\n  )[0]?.image_url;\n\n  return (\n    <>\n      <Row>\n        <Col span={24} lg={8}>\n          <Card\n            style={{\n              textAlign: \"center\",\n              height: \"700px\",\n              width: \"100%\",\n              marginBottom: \"20px\",\n            }}\n          >\n            <h2>Cover Image</h2>\n            {dogImages.length > 0 ? (\n              <img\n                style={{ height: \"auto\", width: \"100%\" }}\n                src={coverImageUrl}\n              />\n            ) : (\n              <Empty />\n            )}\n          </Card>\n\n          <Row justify=\"space-between\">\n            <Col></Col>\n\n            <Col span={12}>\n              <Select\n                onChange={(position: number) =>\n                  setImageUploadPosition(position)\n                }\n                options={imageOptions}\n                style={{ width: \"100%\" }}\n                placeholder=\"Select Image Position\"\n              />\n            </Col>\n          </Row>\n\n          <FileUpload\n            disableUpload={disableUpload}\n            errorMessage={\"Please select an Image Position!\"}\n            setImageUrl={setImageUrl}\n            setImageUpdated={setImageUpdated}\n          />\n        </Col>\n\n        <Col span={24} lg={16}>\n          <Description dog={dog} setRefetchApi={setRefetchApi} />\n\n          <ImageGallery dogImages={dogImages} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst s = {\n  description: {\n    borderBlock: \"2px solid\",\n    marginTop: \"20px\",\n    marginLeft: \"20px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n  },\n  content: {\n    fontSize: \"16px\",\n  },\n};\n\nexport default InfoTable;\n","import * as React from \"react\";\nimport { Typography, Card } from \"antd\";\nimport DefaultLayout from \"../../components/DefaultLayout\";\nimport { getDogs } from \"../../common/api\";\nimport InfoTable from \"../../components/DogPage/info-table\";\n\nconst { useEffect, useState } = React;\nconst { Title } = Typography;\n\nconst DogPage: React.FC = () => {\n  const [dogs, setDogs] = useState<IDogData[]>();\n  const [images, setImages] = useState<IDogImageEndpoint[]>([]);\n  const [refetchApi, setRefetchApi] = useState<boolean>(false);\n\n  const loadDogs = async () => {\n    const res = await getDogs();\n    setDogs(res.dogs);\n    setImages(res.images);\n  };\n\n  useEffect(() => {\n    loadDogs();\n  }, [refetchApi]);\n\n  return (\n    <>\n      <DefaultLayout>\n        <Title style={{ textAlign: \"center\" }}>Dog Page</Title>\n        {dogs &&\n          images &&\n          dogs.map((dog) => {\n            const dogImages = images.filter(\n              (image) => image.dog_id == dog.dog_id\n            );\n            return (\n              <>\n                <Card\n                  style={{\n                    borderRadius: \"10px\",\n                    borderWidth: \"5px\",\n                    borderStyle: \"solid\",\n                    borderColor: \"#001628\",\n                    marginBottom: \"20px\",\n                  }}\n                >\n                  <InfoTable\n                    setRefetchApi={setRefetchApi}\n                    dogImages={dogImages}\n                    dog={dog}\n                  />\n                </Card>\n              </>\n            );\n          })}\n      </DefaultLayout>\n    </>\n  );\n};\n\nexport default DogPage;\n","import * as React from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  Empty,\n  message,\n  Row,\n  Typography,\n} from \"antd\";\nimport { updateExcoInfo } from \"../../common/api\";\n\nconst { Paragraph } = Typography;\n\nconst { useState } = React;\n\ninterface IProps {\n  exco: IExcoData;\n}\n\nconst labelValueMapping = [\n  { value: \"exco_name\", label: \"Name\" },\n  { value: \"exco_year_of_study\", label: \"Year of Study\" },\n  { value: \"exco_hobbies\", label: \"Hobbies\" },\n  { value: \"exco_favourite_dog\", label: \"Favourite Dog\" },\n];\n\nconst InfoTable: React.FC<IProps> = (props) => {\n  const { exco } = props;\n  const [editableExcoInfo, setEditableExcoInfo] = useState<IExcoData>(exco);\n  const [showUpdateButton, setShowUpdateButton] = useState<boolean>(false);\n\n  const onUpdate = async () => {\n    try {\n      const response = await updateExcoInfo(editableExcoInfo);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        {/* <Col span={24} lg={8}>\n          <Card\n            style={{ height: \"300px\", width: \"100%\", marginBottom: \"20px\" }}\n          >\n            <Empty />\n          </Card>\n        </Col> */}\n\n        <Col span={24}>\n          <Descriptions\n            style={s.description}\n            labelStyle={s.label as any}\n            contentStyle={s.content}\n            bordered\n          >\n            {labelValueMapping.map((row) => {\n              const field = row.value;\n\n              return (\n                <Descriptions.Item label={row.label} span={3}>\n                  <Paragraph\n                    editable={{\n                      tooltip: \"Click to edit text\",\n                      onChange: (text) => {\n                        setShowUpdateButton(true);\n                        const newExcoObj = { ...editableExcoInfo };\n                        newExcoObj[field] = text;\n                        setEditableExcoInfo(newExcoObj);\n                      },\n                    }}\n                  >\n                    {editableExcoInfo[field]}\n                    {!editableExcoInfo[field] && (\n                      <span style={{ color: \"gray\" }}>No information</span>\n                    )}\n                  </Paragraph>\n                </Descriptions.Item>\n              );\n            })}\n          </Descriptions>\n\n          <Row justify=\"center\">\n            {showUpdateButton && (\n              <>\n                <Button\n                  style={{ marginTop: \"10px\", marginRight: \"10px\" }}\n                  onClick={() => {\n                    setShowUpdateButton(false);\n                    setEditableExcoInfo(exco);\n                  }}\n                >\n                  Discard Changes\n                </Button>\n\n                <Button\n                  style={{ marginTop: \"10px\" }}\n                  onClick={() => {\n                    onUpdate();\n                    setShowUpdateButton(false);\n                  }}\n                  type=\"primary\"\n                >\n                  Save Changes\n                </Button>\n              </>\n            )}\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst s = {\n  description: {\n    borderBlock: \"2px solid\",\n    marginTop: \"20px\",\n    marginLeft: \"20px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n  },\n  content: {\n    fontSize: \"16px\",\n  },\n};\n\nexport default InfoTable;\n","import DefaultLayout from \"../../components/DefaultLayout\";\nimport * as React from \"react\";\nimport { Typography, Card } from \"antd\";\nimport { getExcos } from \"../../common/api\";\nimport InfoTable from \"../../components/ExcoPage/info-table\";\n\nconst { useEffect, useState } = React;\nconst { Title } = Typography;\n\nconst ExcoPage: React.FC = () => {\n  const [excos, setExcos] = useState<IExcoData[]>();\n\n  useEffect(() => {\n    const loadExcos = async () => {\n      const excos = await getExcos();\n      setExcos(excos);\n    };\n    loadExcos();\n  }, []);\n  return (\n    <DefaultLayout>\n      <Title style={{ textAlign: \"center\" }}>Exco Page</Title>\n      {excos &&\n        excos.map((exco) => {\n          return (\n            <>\n              <Card\n                style={{\n                  borderRadius: \"10px\",\n                  borderWidth: \"5px\",\n                  borderStyle: \"solid\",\n                  borderColor: \"#001628\",\n                  marginBottom: \"20px\",\n                }}\n              >\n                <InfoTable exco={exco} />\n              </Card>\n            </>\n          );\n        })}\n    </DefaultLayout>\n  );\n};\n\nexport default ExcoPage;\n","import { Button, message, Row } from \"antd\";\nimport * as React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { updateMainDescription } from \"../../common/api\";\n\nconst { useState } = React;\n\ninterface IProps {\n  description: string;\n  setShowForm: (showForm: boolean) => void;\n}\nconst DescriptionForm: React.FC<IProps> = (props) => {\n  const { description, setShowForm } = props;\n  const [editedDescription, setEditedDescription] =\n    useState<string>(description);\n\n  const submitEditedDescription = async () => {\n    try {\n      const response = await updateMainDescription(editedDescription);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        <ReactQuill\n          style={{ height: \"200px\", width: \"100%\" }}\n          value={editedDescription}\n          onChange={(text) => setEditedDescription(text)}\n          theme=\"snow\"\n        />\n      </Row>\n      <Row justify=\"end\" style={{ marginTop: \"100px\" }}>\n        <Button\n          onClick={() => setShowForm(false)}\n          style={{ marginRight: \"20px\" }}\n        >\n          Discard changes\n        </Button>\n\n        <Button\n          onClick={() => {\n            setShowForm(false);\n            submitEditedDescription();\n          }}\n          type=\"primary\"\n        >\n          Save changes\n        </Button>\n      </Row>\n    </>\n  );\n};\n\nexport default DescriptionForm;\n","import DefaultLayout from \"../../components/DefaultLayout\";\nimport { Button, Card, Row, Typography } from \"antd\";\nimport React from \"react\";\nimport ReactHTMLParser from \"react-html-parser\";\nimport { getMainDescription } from \"../../common/api\";\nimport DescriptionForm from \"../../components/MainPage/description-form\";\n\nconst { Title } = Typography;\n\nconst { useEffect, useState } = React;\n\nconst MainPage: React.FC = () => {\n  const [description, setDescription] = useState<string>(\"\");\n  const [showForm, setShowForm] = useState<boolean>(false);\n  useEffect(() => {\n    const loadDescription = async () => {\n      const description = await getMainDescription();\n      setDescription(description);\n    };\n    loadDescription();\n  }, [showForm]);\n\n  return (\n    <>\n      <DefaultLayout>\n        <Title style={{ textAlign: \"center\" }}>Main Page</Title>\n\n        {!showForm && (\n          <>\n            <Card\n              style={{\n                borderRadius: \"10px\",\n                borderWidth: \"5px\",\n                borderStyle: \"solid\",\n                borderColor: \"#001628\",\n                marginBottom: \"20px\",\n              }}\n            >\n              {ReactHTMLParser(description)}\n            </Card>\n\n            <Row justify=\"center\">\n              <Button onClick={() => setShowForm(true)} type=\"primary\">\n                Edit Description{\" \"}\n              </Button>\n            </Row>\n          </>\n        )}\n\n        {showForm && (\n          <DescriptionForm\n            setShowForm={setShowForm}\n            description={description}\n          />\n        )}\n      </DefaultLayout>\n    </>\n  );\n};\n\nexport default MainPage;\n","import { Button, message, Row, DatePicker } from \"antd\";\nimport * as React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { updateActivityPost, updateMainDescription } from \"../../common/api\";\nimport moment from \"moment\";\n\nconst { useState } = React;\n\ninterface IProps {\n  post: IActivityPosts;\n  setReload: (reload: boolean) => void;\n}\nconst DescriptionFormUpdate: React.FC<IProps> = (props) => {\n  const { post, setReload } = props;\n  const [editedPost, setEditedPost] = useState<IActivityPosts>(post);\n  const [showForm, setShowForm] = useState<boolean>(false);\n\n  const submitEditedDescription = async () => {\n    try {\n      const response = await updateActivityPost(editedPost);\n      setReload(true);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n  };\n\n  return (\n    <>\n      {!showForm && (\n        <Row justify=\"center\">\n          <Button\n            onClick={() => {\n              setShowForm(true);\n              setReload(false);\n            }}\n            type=\"primary\"\n          >\n            Edit Description\n          </Button>\n        </Row>\n      )}\n      {showForm && (\n        <>\n          <Row>\n            <Row style={{ marginBottom: 10 }}>\n              <p style={{ fontSize: 18, margin: 0, marginRight: 10 }}>Date: </p>\n              <DatePicker\n                onChange={(date) => {\n                  if (date)\n                    setEditedPost({\n                      ...editedPost,\n                      date_posted: new Date(\n                        moment(date?.toDate())\n                          .utcOffset(\"+8\")\n                          .format(\"YYYY-MM-DD HH:mm\")\n                      ),\n                    });\n                }}\n              />\n            </Row>\n\n            <ReactQuill\n              style={{ height: \"200px\", width: \"100%\" }}\n              value={editedPost.activity_description}\n              onChange={(text) =>\n                setEditedPost({ ...editedPost, activity_description: text })\n              }\n              theme=\"snow\"\n            />\n          </Row>\n          <Row justify=\"end\" style={{ marginTop: \"100px\" }}>\n            <Button\n              onClick={() => setShowForm(false)}\n              style={{ marginRight: \"20px\" }}\n            >\n              Discard changes\n            </Button>\n\n            <Button\n              onClick={() => {\n                setShowForm(false);\n                submitEditedDescription();\n              }}\n              type=\"primary\"\n            >\n              Save changes\n            </Button>\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default DescriptionFormUpdate;\n","import { Button, message, Row, DatePicker } from \"antd\";\nimport * as React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport moment from \"moment\";\n\nimport {\n  submitActivityPost,\n  updateActivityPost,\n  updateMainDescription,\n} from \"../../common/api\";\n\nconst { useState } = React;\n\ninterface IProps {\n  setReload: (reload: boolean) => void;\n}\n\nconst DescriptionFormPost: React.FC<IProps> = (props) => {\n  const { setReload } = props;\n  const [showForm, setShowForm] = useState<boolean>(false);\n  const [formDetails, setFormDetails] = useState<IActivityPostForm>({\n    date: new Date(),\n    description: \"\",\n  });\n\n  const submitForm = async () => {\n    try {\n      const response = await submitActivityPost(formDetails);\n      setReload(true);\n      if (response) {\n        message.success(\"Update successful\");\n      } else {\n        message.error(\"Failed to update\");\n      }\n    } catch {\n      message.error(\"Failed to connect to server.\");\n    }\n  };\n\n  return (\n    <>\n      {!showForm && (\n        <Button\n          onClick={() => setShowForm(true)}\n          style={{\n            backgroundColor: \"#6C64FF\",\n            borderColor: \"#6C64FF\",\n            marginTop: 50,\n          }}\n          type=\"primary\"\n          block\n        >\n          New Post\n        </Button>\n      )}\n\n      {showForm && (\n        <>\n          <Row>\n            <Row style={{ marginBottom: 10 }}>\n              <p style={{ fontSize: 18, margin: 0, marginRight: 10 }}>Date: </p>\n              <DatePicker\n                onChange={(date) => {\n                  if (date)\n                    setFormDetails({\n                      ...formDetails,\n                      date: new Date(\n                        moment(date?.toDate())\n                          .utcOffset(\"+8\")\n                          .format(\"YYYY-MM-DD HH:mm\")\n                      ),\n                    });\n                }}\n              />\n            </Row>\n\n            <ReactQuill\n              style={{ height: \"200px\", width: \"100%\" }}\n              onChange={(text) =>\n                setFormDetails({ ...formDetails, description: text })\n              }\n              theme=\"snow\"\n            />\n          </Row>\n          <Row justify=\"end\" style={{ marginTop: \"100px\" }}>\n            <Button\n              onClick={() => setShowForm(false)}\n              style={{ marginRight: \"20px\" }}\n            >\n              Discard changes\n            </Button>\n\n            <Button\n              onClick={() => {\n                setShowForm(false);\n                submitForm();\n              }}\n              type=\"primary\"\n            >\n              Submit Post\n            </Button>\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default DescriptionFormPost;\n","import DefaultLayout from \"../../components/DefaultLayout\";\nimport { Button, Card, Row, Typography } from \"antd\";\nimport React from \"react\";\nimport ReactHTMLParser from \"react-html-parser\";\nimport { getActivityPosts } from \"../../common/api\";\nimport DescriptionFormUpdate from \"../../components/ActivityPage/description-form-update\";\nimport dateFormat from \"dateformat\";\nimport DescriptionFormPost from \"../../components/ActivityPage/description-form-post\";\nimport Upload from \"../../components/ActivityPage/upload\";\n\nconst { Title } = Typography;\n\nconst { useEffect, useState } = React;\n\nconst ActivityPage: React.FC = () => {\n  const [posts, setPosts] = useState<IActivityPosts[]>([]);\n  const [reload, setReload] = useState<boolean>(false);\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      const posts = await getActivityPosts();\n      setPosts(posts);\n    };\n    loadPosts();\n  }, [reload]);\n\n  return (\n    <DefaultLayout>\n      <Title style={{ textAlign: \"center\" }}>Activity Page</Title>\n\n      <p style={{ fontSize: 60, color: \"red\" }}>\n        THIS PAGE IS UNDER CONSTRUCTION ON THE MAIN PAGE\n      </p>\n\n      {posts.length > 0 &&\n        posts.map((post) => {\n          return (\n            <>\n              <>\n                <Card\n                  style={{\n                    borderRadius: \"10px\",\n                    borderWidth: \"5px\",\n                    borderStyle: \"solid\",\n                    borderColor: \"#001628\",\n                    marginBottom: \"20px\",\n                    marginTop: \"20px\",\n                  }}\n                >\n                  <>\n                    <b>Date: </b>\n                    {post.date_posted &&\n                      String(post.date_posted).substring(0, 10)}\n                    <br />\n                    <br />\n                    {ReactHTMLParser(post.activity_description)}\n                  </>\n                </Card>\n              </>\n\n              <DescriptionFormUpdate setReload={setReload} post={post} />\n            </>\n          );\n        })}\n\n      <DescriptionFormPost setReload={setReload} />\n    </DefaultLayout>\n  );\n};\n\nexport default ActivityPage;\n","import \"./App.css\";\nimport * as React from \"react\";\n\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport HomePage from \"./Pages/HomePage\";\nimport LoginPage from \"./Pages/LoginPage\";\nimport DogPage from \"./Pages/DogPage\";\nimport ExcoPage from \"./Pages/ExcoPage\";\nimport MainPage from \"./Pages/MainPage\";\nimport ActivityPage from \"./Pages/ActivityPage\";\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  const [userAuthenticated, setUserAuthenticated] = useState<boolean>();\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem(\"userLoggedIn\") == \"true\";\n    setUserAuthenticated(isLoggedIn);\n  }, []);\n  const location = useLocation();\n\n  if (userAuthenticated == false)\n    return <LoginPage setUserAuthenticated={setUserAuthenticated} />;\n\n  return (\n    <>\n      <Switch location={location} key={location.pathname}>\n        <Route exact path=\"/\" component={HomePage}></Route>\n        <Route\n          exact\n          path=\"/login\"\n          component={() => (\n            <LoginPage setUserAuthenticated={setUserAuthenticated} />\n          )}\n        ></Route>\n        <Route path=\"/home\" component={HomePage}></Route>\n        <Route path=\"/dogs\" component={DogPage}></Route>\n        <Route path=\"/exco\" component={ExcoPage}></Route>\n        <Route path=\"/main\" component={MainPage}></Route>\n        <Route path=\"/activity\" component={ActivityPage}></Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}